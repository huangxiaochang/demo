webpackJsonp([10],{164:function(t,n,e){"use strict";function i(t){A||e(216)}Object.defineProperty(n,"__esModule",{value:!0});var a=e(176),s=e(204),A=!1,l=e(1),o=i,p=l(a.a,s.a,!1,o,"data-v-4db7361b",null);p.options.__file="src\\views\\dateTimePack\\index.vue",p.esModule&&Object.keys(p.esModule).some(function(t){return"default"!==t&&"__"!==t.substr(0,2)}),n.default=p.exports},176:function(t,n,e){"use strict";n.a={data:function(){return{value:""}}}},192:function(t,n,e){n=t.exports=e(0)(!0),n.push([t.i,"/*\n  这里定义了整个项目的公共的样式\n */\n/*每一个路由页面的标题样式*/\n.title[data-v-4db7361b] {\n  font-size: 24px;\n  color: #99A9BF;\n  margin: 10px;\n}\n/*每一项的标题样式*/\n.title-item[data-v-4db7361b] {\n  display: block;\n  border-left: 8px solid #D3DCE6;\n  color: #E5E9F2;\n  font-size: 18px;\n  padding-left: 10px;\n  margin: 8px;\n}\n/*每一个段落的样式*/\n.content-item[data-v-4db7361b] {\n  margin: 10px;\n  line-height: 1.5;\n  text-indent: 2em;\n  width: 90%;\n  padding-left: 20px;\n}\n/*去除li的默认样式*/\nul[data-v-4db7361b] {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n}\n.test[data-v-4db7361b] {\n  margin-bottom: 500px;\n}\n","",{version:3,sources:["E:/componentsDemo/componentsDEMO/src/views/dateTimePack/index.vue"],names:[],mappings:"AAAA;;GAEG;AACH,gBAAgB;AAChB;EACE,gBAAgB;EAChB,eAAe;EACf,aAAa;CACd;AACD,YAAY;AACZ;EACE,eAAe;EACf,+BAA+B;EAC/B,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,YAAY;CACb;AACD,YAAY;AACZ;EACE,aAAa;EACb,iBAAiB;EACjB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;CACpB;AACD,aAAa;AACb;EACE,WAAW;EACX,UAAU;EACV,iBAAiB;CAClB;AACD;EACE,qBAAqB;CACtB",file:"index.vue",sourcesContent:["/*\n  这里定义了整个项目的公共的样式\n */\n/*每一个路由页面的标题样式*/\n.title {\n  font-size: 24px;\n  color: #99A9BF;\n  margin: 10px;\n}\n/*每一项的标题样式*/\n.title-item {\n  display: block;\n  border-left: 8px solid #D3DCE6;\n  color: #E5E9F2;\n  font-size: 18px;\n  padding-left: 10px;\n  margin: 8px;\n}\n/*每一个段落的样式*/\n.content-item {\n  margin: 10px;\n  line-height: 1.5;\n  text-indent: 2em;\n  width: 90%;\n  padding-left: 20px;\n}\n/*去除li的默认样式*/\nul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n}\n.test {\n  margin-bottom: 500px;\n}\n"],sourceRoot:""}])},204:function(t,n,e){"use strict";var i=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("section",[e("h2",{staticClass:"title"},[t._v("菜单组件 > 日期时间选择组件")]),t._v(" "),e("h3",{staticClass:"title-item"},[t._v("组件说明")]),t._v(" "),e("p",{staticClass:"content-item"},[t._v("\n\t\t其实在完成日历组件，月份选择组件和时间选择组件之后，实现这个组件的话是很简单的，因为实现的逻辑其实是那三个组件实现逻辑的集合。也就是把上面提到的三个组件组合在一起，然后再修改一下即可完成此组件。对于选择面板的弹出和隐藏实现的原来和时间选择组件是一样。组件返回的日期时间的格式如下，'2017-10-23 09:32:00'。组件中也进行了初始化的操作，即如果在slot的内容中如果绑定的value字段的值有初始值的话，在选择的面板中，开始时的选中的值即为该值，否则默认为当前的日期和时间。\n\t")]),t._v(" "),e("h3",{staticClass:"title-item"},[t._v("示例")]),t._v(" "),e("p",{staticClass:"content-item"},[t._v('\n\t\t在页面中引用的时候，组件中的slot的内容和样式可以自己定义，如下<pg-date-time :value.sync="value">\n\t\t\t<input type="text" class="pg-time-pack" v-model="value" readonly>\n\t\t</pg-date-time>\n\t\t\n\t')]),t._v(" "),e("p",{staticClass:"content-item"},[t._v("\n\t\t该组件弹出的选择的面板是固定宽度的，而且始终是和slot的内容左对齐的。本组件的布局和样式可能不会是和全部的应用场景，但是只要知道它的核心实现原理，组件的布局和样式可以根据实际项目的需要进行重新的自定义，甚至在理解实现的原理之后，可以指定修改部分的逻辑以适合实际项目的需求，比如增加日期可选范围的限制等。在本组件中，并没有实现该部分的逻辑，只是实现了基本的逻辑，以为这样就可以适合大部分的实际项目了，其他的内容可以根据实际的需求进行增加。\n\t")]),t._v(" "),e("h3",{staticClass:"title-item"},[t._v("效果")]),t._v(" "),e("p",{staticClass:"content-item test"},[t._v("\n\t\t效果如下\n\t\t"),e("pg-date-time",{attrs:{value:t.value},on:{"update:value":function(n){t.value=n}}},[e("input",{directives:[{name:"model",rawName:"v-model",value:t.value,expression:"value"}],staticClass:"pg-time-pack",attrs:{type:"text",readonly:""},domProps:{value:t.value},on:{input:function(n){n.target.composing||(t.value=n.target.value)}}})])],1)])},a=[];i._withStripped=!0;var s={render:i,staticRenderFns:a};n.a=s},216:function(t,n,e){var i=e(192);"string"==typeof i&&(i=[[t.i,i,""]]),i.locals&&(t.exports=i.locals);e(2)("021c75ee",i,!1)}});